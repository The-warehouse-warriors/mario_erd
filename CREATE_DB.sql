-- MySQL Script generated by MySQL Workbench
-- Thu Oct 21 19:52:35 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema marios_pizza
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `marios_pizza` ;

-- -----------------------------------------------------
-- Schema marios_pizza
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `marios_pizza` DEFAULT CHARACTER SET utf8 ;
USE `marios_pizza` ;

-- -----------------------------------------------------
-- Table `marios_pizza`.`addressinfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`addressinfo` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`addressinfo` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `HouseNumber` VARCHAR(10) NOT NULL,
  `Address` VARCHAR(45) NOT NULL,
  `Zipcode` VARCHAR(6) NULL DEFAULT NULL,
  `City` VARCHAR(45) NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `AddressInfoID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 16384
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`category` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`category` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(255) NOT NULL,
  `Active` TINYINT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`municipality`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`municipality` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`municipality` (
  `ID` INT NOT NULL,
  `Name` VARCHAR(45) NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  INDEX `index_MunName` (`Name` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`city`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`city` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`city` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Municipality_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Municipality_ID`),
  INDEX `fk_City_Municipality1_idx` (`Municipality_ID` ASC) VISIBLE,
  INDEX `index_CityName` (`Name` ASC) VISIBLE,
  CONSTRAINT `fk_City_Municipality1`
    FOREIGN KEY (`Municipality_ID`)
    REFERENCES `marios_pizza`.`municipality` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`coupon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`coupon` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`coupon` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Code` VARCHAR(45) NOT NULL,
  `DiscountPercentage` DECIMAL(7,3) NULL DEFAULT NULL,
  `Discountprice` INT NULL DEFAULT NULL,
  `CouponFormula` VARCHAR(500) NULL DEFAULT NULL,
  `Description` VARCHAR(255) NOT NULL,
  `Active` TINYINT NOT NULL,
  `StartDate` DATETIME NOT NULL,
  `EndDate` DATETIME NULL DEFAULT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`customer` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`customer` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Birthdate` DATE NULL DEFAULT NULL,
  `Email` VARCHAR(255) NOT NULL,
  `Phone1` VARCHAR(12) NOT NULL,
  `Phone2` VARCHAR(12) NULL DEFAULT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `CustomerID_UNIQUE` (`ID` ASC) VISIBLE,
  UNIQUE INDEX `Email_UNIQUE` (`Email` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 16384
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`customer_addressinfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`customer_addressinfo` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`customer_addressinfo` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Customer_ID` INT NOT NULL,
  `AddressInfo_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Customer_ID`, `AddressInfo_ID`),
  INDEX `fk_Customer_Addressinfo_Customer1_idx` (`Customer_ID` ASC) VISIBLE,
  INDEX `fk_Customer_Addressinfo_AddressInfo1_idx` (`AddressInfo_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Customer_Addressinfo_AddressInfo1`
    FOREIGN KEY (`AddressInfo_ID`)
    REFERENCES `marios_pizza`.`addressinfo` (`ID`),
  CONSTRAINT `fk_Customer_Addressinfo_Customer1`
    FOREIGN KEY (`Customer_ID`)
    REFERENCES `marios_pizza`.`customer` (`ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 16384
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`deliverytype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`deliverytype` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`deliverytype` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Type` VARCHAR(45) NOT NULL,
  `Active` TINYINT NOT NULL DEFAULT '0',
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`openingtime`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`openingtime` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`openingtime` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(255) NULL DEFAULT NULL,
  `MonOpen` TIME NULL DEFAULT NULL,
  `MonClosed` TIME NULL DEFAULT NULL,
  `TueOpen` TIME NULL DEFAULT NULL,
  `TueClosed` TIME NULL DEFAULT NULL,
  `WedOpen` TIME NULL DEFAULT NULL,
  `WedClosed` TIME NULL DEFAULT NULL,
  `ThuOpen` TIME NULL DEFAULT NULL,
  `ThueClosed` TIME NULL DEFAULT NULL,
  `FriOpen` TIME NULL DEFAULT NULL,
  `FriClosed` TIME NULL DEFAULT NULL,
  `SatOpen` TIME NULL DEFAULT NULL,
  `SatClosed` TIME NULL DEFAULT NULL,
  `SunOpen` TIME NULL DEFAULT NULL,
  `SunClosed` TIME NULL DEFAULT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`shop`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`shop` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`shop` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(75) NOT NULL,
  `Phone` VARCHAR(12) NOT NULL,
  `Email` VARCHAR(255) NOT NULL,
  `StreetName` VARCHAR(75) NOT NULL,
  `HouseNumber` VARCHAR(10) NOT NULL,
  `Zipcode` VARCHAR(6) NOT NULL,
  `City` VARCHAR(45) NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  `OpeningTime_ID` INT NULL DEFAULT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Shop_OpeningTime1_idx` (`OpeningTime_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Shop_OpeningTime1`
    FOREIGN KEY (`OpeningTime_ID`)
    REFERENCES `marios_pizza`.`openingtime` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`differentopeningtime`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`differentopeningtime` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`differentopeningtime` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Date` DATE NOT NULL,
  `Open` TIME NOT NULL,
  `Close` TIME NOT NULL,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(255) NULL DEFAULT NULL,
  `Shop_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Shop_ID`),
  INDEX `fk_DiffOpeningTime_Shop1_idx` (`Shop_ID` ASC) VISIBLE,
  CONSTRAINT `fk_DiffOpeningTime_Shop1`
    FOREIGN KEY (`Shop_ID`)
    REFERENCES `marios_pizza`.`shop` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`tax`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`tax` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`tax` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Tax` DECIMAL(7,3) NOT NULL,
  `Description` VARCHAR(255) NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`ingredient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`ingredient` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`ingredient` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(255) NULL DEFAULT NULL,
  `Price` DECIMAL(7,3) NULL DEFAULT NULL,
  `Active` TINYINT NOT NULL DEFAULT '0',
  `Tax_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Tax_ID`),
  INDEX `fk_Ingredients_Tax1_idx` (`Tax_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Ingredients_Tax1`
    FOREIGN KEY (`Tax_ID`)
    REFERENCES `marios_pizza`.`tax` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`subcategory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`subcategory` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`subcategory` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(255) NOT NULL,
  `Active` TINYINT NOT NULL DEFAULT '0',
  `Categorie_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Categorie_ID`),
  INDEX `fk_SubCategory_Category1_idx` (`Categorie_ID` ASC) VISIBLE,
  CONSTRAINT `fk_SubCategory_Category1`
    FOREIGN KEY (`Categorie_ID`)
    REFERENCES `marios_pizza`.`category` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`nonpizza`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`nonpizza` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`nonpizza` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(255) NOT NULL,
  `Active` TINYINT NOT NULL,
  `Tax_ID` INT NOT NULL,
  `SubCategory_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `SubCategory_ID`, `Tax_ID`),
  INDEX `fk_NonPizza_Tax1_idx` (`Tax_ID` ASC) VISIBLE,
  INDEX `fk_NonPizza_SubCategory1_idx` (`SubCategory_ID` ASC) VISIBLE,
  CONSTRAINT `fk_NonPizza_SubCategory1`
    FOREIGN KEY (`SubCategory_ID`)
    REFERENCES `marios_pizza`.`subcategory` (`ID`),
  CONSTRAINT `fk_NonPizza_Tax1`
    FOREIGN KEY (`Tax_ID`)
    REFERENCES `marios_pizza`.`tax` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`pizzabottom`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`pizzabottom` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`pizzabottom` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Size` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(255) NULL DEFAULT NULL,
  `Active` TINYINT NOT NULL,
  `Price` DECIMAL(7,3) NULL DEFAULT NULL,
  `Tax_ID` INT NOT NULL,
  `PizzaBottomType_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Tax_ID`, `PizzaBottomType_ID`),
  INDEX `fk_PizzaBottom_Tax1_idx` (`Tax_ID` ASC) VISIBLE,
  CONSTRAINT `fk_PizzaBottom_Tax1`
    FOREIGN KEY (`Tax_ID`)
    REFERENCES `marios_pizza`.`tax` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`property`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`property` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`property` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL DEFAULT NULL,
  `Description` VARCHAR(255) NULL DEFAULT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`sauce`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`sauce` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`sauce` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(255) NOT NULL,
  `Price` DECIMAL(7,3) NULL DEFAULT NULL,
  `Active` TINYINT NOT NULL,
  `Tax_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Tax_ID`),
  INDEX `fk_Sauce_Tax1_idx` (`Tax_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Sauce_Tax1`
    FOREIGN KEY (`Tax_ID`)
    REFERENCES `marios_pizza`.`tax` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`item_property`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`item_property` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`item_property` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `PizzaBottom_ID` INT NULL DEFAULT NULL,
  `Sauce_ID` INT NULL DEFAULT NULL,
  `Ingredient_ID` INT NULL DEFAULT NULL,
  `NonPizza_ID` INT NULL DEFAULT NULL,
  `Property_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Property_ID`),
  INDEX `fk_Item_Property_PizzaBottom1_idx` (`PizzaBottom_ID` ASC) VISIBLE,
  INDEX `fk_Item_Property_Sauce1_idx` (`Sauce_ID` ASC) VISIBLE,
  INDEX `fk_Item_Property_Ingredient1_idx` (`Ingredient_ID` ASC) VISIBLE,
  INDEX `fk_Item_Property_Property1_idx` (`Property_ID` ASC) VISIBLE,
  INDEX `fk_Item_Property_NonPizza1_idx` (`NonPizza_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Item_Property_Ingredient1`
    FOREIGN KEY (`Ingredient_ID`)
    REFERENCES `marios_pizza`.`ingredient` (`ID`),
  CONSTRAINT `fk_Item_Property_NonPizza1`
    FOREIGN KEY (`NonPizza_ID`)
    REFERENCES `marios_pizza`.`nonpizza` (`ID`),
  CONSTRAINT `fk_Item_Property_PizzaBottom1`
    FOREIGN KEY (`PizzaBottom_ID`)
    REFERENCES `marios_pizza`.`pizzabottom` (`ID`),
  CONSTRAINT `fk_Item_Property_Property1`
    FOREIGN KEY (`Property_ID`)
    REFERENCES `marios_pizza`.`property` (`ID`),
  CONSTRAINT `fk_Item_Property_Sauce1`
    FOREIGN KEY (`Sauce_ID`)
    REFERENCES `marios_pizza`.`sauce` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`marioorderdata01`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`marioorderdata01` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`marioorderdata01` (
  `MyUnknownColumn` INT NULL DEFAULT NULL,
  `WinkelID` INT NULL DEFAULT NULL,
  `Winkelnaam` TEXT NULL DEFAULT NULL,
  `CustomerID` INT NULL DEFAULT NULL,
  `Klantnaam` TEXT NULL DEFAULT NULL,
  `TelefoonNr` TEXT NULL DEFAULT NULL,
  `Email` TEXT NULL DEFAULT NULL,
  `AddressID` INT NULL DEFAULT NULL,
  `Adres` TEXT NULL DEFAULT NULL,
  `Woonplaats` TEXT NULL DEFAULT NULL,
  `OrderID` INT NULL DEFAULT NULL,
  `Besteldatum` TEXT NULL DEFAULT NULL,
  `DeliveryTypeID` INT NULL DEFAULT NULL,
  `AfleverType` TEXT NULL DEFAULT NULL,
  `AfleverDatum` TEXT NULL DEFAULT NULL,
  `AfleverMoment` TEXT NULL DEFAULT NULL,
  `ProductID` INT NULL DEFAULT NULL,
  `Product` TEXT NULL DEFAULT NULL,
  `PizzaBodemID` INT NULL DEFAULT NULL,
  `PizzaBodem` TEXT NULL DEFAULT NULL,
  `PizzaSausID` INT NULL DEFAULT NULL,
  `PizzaSaus` TEXT NULL DEFAULT NULL,
  `Prijs` TEXT NULL DEFAULT NULL,
  `Bezorgkosten` TEXT NULL DEFAULT NULL,
  `BezorgkostenDecimal` DECIMAL(7,3) NULL DEFAULT NULL,
  `Aantal` INT NULL DEFAULT NULL,
  `Extra IngrediÃƒÂ«nten` TEXT NULL DEFAULT NULL,
  `Prijs Extra IngrediÃƒÂ«nten` TEXT NULL DEFAULT NULL,
  `Regelprijs` TEXT NULL DEFAULT NULL,
  `RegelprijsDecimal` DECIMAL(7,3) NULL DEFAULT NULL,
  `Totaalprijs` TEXT NULL DEFAULT NULL,
  `TotaalprijsDecimal` DECIMAL(7,3) NULL DEFAULT NULL,
  `CouponID` INT NULL DEFAULT NULL,
  `Gebruikte Coupon` TEXT NULL DEFAULT NULL,
  `Coupon Korting` TEXT NULL DEFAULT NULL,
  `Te Betalen` TEXT NULL DEFAULT NULL,
  `TeBetalenDecimal` DECIMAL(7,3) NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`order` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`order` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `OrderStatus` TINYINT NOT NULL,
  `DeliveryPlan` DATETIME NOT NULL,
  `DeliveryTime` DATETIME NULL DEFAULT NULL,
  `DeliveryPrice` DECIMAL(7,3) NULL DEFAULT NULL,
  `Customer_Id` INT NOT NULL,
  `DeliveryType_ID` INT NOT NULL,
  `Shop_ID` INT NOT NULL,
  `OrderDate` TIMESTAMP NOT NULL,
  `TotalOrderPrice` DECIMAL(7,3) NULL DEFAULT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Customer_Id`, `DeliveryType_ID`, `Shop_ID`),
  INDEX `fk_Order_Customer_idx` (`Customer_Id` ASC) VISIBLE,
  INDEX `fk_Order_DeliveryType1_idx` (`DeliveryType_ID` ASC) VISIBLE,
  INDEX `fk_Order_Shop1_idx` (`Shop_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Order_Customer`
    FOREIGN KEY (`Customer_Id`)
    REFERENCES `marios_pizza`.`customer` (`ID`),
  CONSTRAINT `fk_Order_DeliveryType`
    FOREIGN KEY (`DeliveryType_ID`)
    REFERENCES `marios_pizza`.`deliverytype` (`ID`),
  CONSTRAINT `fk_Order_Shop`
    FOREIGN KEY (`Shop_ID`)
    REFERENCES `marios_pizza`.`shop` (`ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 16384
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`order_coupon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`order_coupon` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`order_coupon` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Order_ID` INT NOT NULL,
  `Coupon_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Coupon_ID`),
  INDEX `fk_Order_Coupon_Coupon1_idx` (`Coupon_ID` ASC) VISIBLE,
  INDEX `fk_Order_Coupon_Order1_idx` (`Order_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Order_Coupon_Coupon1`
    FOREIGN KEY (`Coupon_ID`)
    REFERENCES `marios_pizza`.`coupon` (`ID`),
  CONSTRAINT `fk_Order_Coupon_Order1`
    FOREIGN KEY (`Order_ID`)
    REFERENCES `marios_pizza`.`order` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`pizza`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`pizza` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`pizza` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Sauce_ID` INT NOT NULL,
  `PizzaBottom_ID` INT NOT NULL,
  `IsCustom` TINYINT NOT NULL DEFAULT '0' COMMENT 'Standaard GEEN custom pizza',
  `SubCategory_ID` INT NOT NULL,
  `Active` TINYINT NOT NULL DEFAULT '0',
  `Description` VARCHAR(255) NOT NULL,
  `Price` DECIMAL(7,3) NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Sauce_ID`, `PizzaBottom_ID`, `SubCategory_ID`),
  INDEX `fk_Pizza_Sauce1_idx` (`Sauce_ID` ASC) VISIBLE,
  INDEX `fk_Pizza_PizzaBottom1_idx` (`PizzaBottom_ID` ASC) VISIBLE,
  INDEX `fk_Pizza_SubCategory1_idx` (`SubCategory_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Pizza_PizzaBottom1`
    FOREIGN KEY (`PizzaBottom_ID`)
    REFERENCES `marios_pizza`.`pizzabottom` (`ID`),
  CONSTRAINT `fk_Pizza_Sauce1`
    FOREIGN KEY (`Sauce_ID`)
    REFERENCES `marios_pizza`.`sauce` (`ID`),
  CONSTRAINT `fk_Pizza_SubCategory1`
    FOREIGN KEY (`SubCategory_ID`)
    REFERENCES `marios_pizza`.`subcategory` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`orderitem`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`orderitem` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`orderitem` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `OrderID` INT NOT NULL,
  `Pizza_ID` INT NULL DEFAULT NULL,
  `NonPizza_ID` INT NULL DEFAULT NULL,
  `OrderName` VARCHAR(45) NOT NULL,
  `Amount` INT NOT NULL,
  `TotalPrice` DECIMAL(7,3) NOT NULL,
  `Tax` DECIMAL(7,3) NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `OrderID`),
  INDEX `fk_Order_id` (`OrderID` ASC) INVISIBLE,
  INDEX `fk_OrderItem_NonPizza1_idx` (`NonPizza_ID` ASC) VISIBLE,
  INDEX `fk_OrderItem_Pizza1_idx` (`Pizza_ID` ASC) VISIBLE,
  CONSTRAINT `fk_OrderItem_NonPizza1`
    FOREIGN KEY (`NonPizza_ID`)
    REFERENCES `marios_pizza`.`nonpizza` (`ID`),
  CONSTRAINT `fk_OrderItem_Order1`
    FOREIGN KEY (`OrderID`)
    REFERENCES `marios_pizza`.`order` (`ID`),
  CONSTRAINT `fk_OrderItem_Pizza1`
    FOREIGN KEY (`Pizza_ID`)
    REFERENCES `marios_pizza`.`pizza` (`ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 32768
DEFAULT CHARACTER SET = utf8mb3
KEY_BLOCK_SIZE = 16;


-- -----------------------------------------------------
-- Table `marios_pizza`.`pizza_ingredient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`pizza_ingredient` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`pizza_ingredient` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Pizza_ID` INT NOT NULL,
  `Ingredient_ID` INT NOT NULL,
  `Price` DECIMAL(7,3) NULL DEFAULT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Pizza_ID`, `Ingredient_ID`),
  INDEX `fk_Pizza_Ingredient_Ingredient1_idx` (`Ingredient_ID` ASC) VISIBLE,
  INDEX `fk_Pizza_Ingredient_Pizza1_idx` (`Pizza_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Pizza_Ingredient_Ingredient1`
    FOREIGN KEY (`Ingredient_ID`)
    REFERENCES `marios_pizza`.`ingredient` (`ID`),
  CONSTRAINT `fk_Pizza_Ingredient_Pizza1`
    FOREIGN KEY (`Pizza_ID`)
    REFERENCES `marios_pizza`.`pizza` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`street`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`street` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`street` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(75) NOT NULL,
  `City_ID` INT NOT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `City_ID`),
  INDEX `fk_StreetName_City1_idx` (`City_ID` ASC) VISIBLE,
  INDEX `index_StreetName` (`Name` ASC) VISIBLE,
  CONSTRAINT `fk_StreetName_City1`
    FOREIGN KEY (`City_ID`)
    REFERENCES `marios_pizza`.`city` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `marios_pizza`.`servicearea`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `marios_pizza`.`servicearea` ;

CREATE TABLE IF NOT EXISTS `marios_pizza`.`servicearea` (
  `ID` INT NOT NULL,
  `Zipcode` VARCHAR(6) NOT NULL,
  `BreakpointStart` VARCHAR(6) NOT NULL,
  `BreakpointEnd` VARCHAR(6) NOT NULL,
  `Street_ID` INT NOT NULL,
  `Shop_ID` INT NULL DEFAULT NULL,
  `CreatedOn` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(45) NOT NULL,
  `LastUpdate` DATETIME NOT NULL,
  `UpdateBy` VARCHAR(45) NOT NULL,
  `Deleted` TINYINT NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`, `Street_ID`),
  INDEX `fk_ZipCode_Shop1_idx` (`Shop_ID` ASC) VISIBLE,
  INDEX `fk_ZipCode_StreetName1_idx` (`Street_ID` ASC) VISIBLE,
  INDEX `index_Zipcode` (`Zipcode` ASC) VISIBLE,
  CONSTRAINT `fk_ZipCode_Shop1`
    FOREIGN KEY (`Shop_ID`)
    REFERENCES `marios_pizza`.`shop` (`ID`),
  CONSTRAINT `fk_ZipCode_StreetName1`
    FOREIGN KEY (`Street_ID`)
    REFERENCES `marios_pizza`.`street` (`ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;

USE `marios_pizza` ;

-- -----------------------------------------------------
-- procedure ImportZipcodes
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`ImportZipcodes`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ImportZipcodes`(
    IN inZipcode varchar(6),
    IN inBreakpointStart varchar(6),
    IN inBreakpointEnd varchar(6),
    IN inCityName varchar(45),
    IN inStreetName varchar(75),
    IN inMunicipalityId int
)
BEGIN

    SET FOREIGN_KEY_CHECKS = 0;

    /* Check if city exists in DB, if not create */
    SET @city_id = (SELECT id FROM city WHERE Name = inCityName);
    IF (@city_id IS NULL) THEN
        INSERT INTO city (Name, Municipality_ID, CreatedOn, CreatedBy, LastUpdate, UpdateBy)
        VALUE (
               inCityName,
               inmunicipalityId,
               NOW(),
               'System - import',
               NOW(),
               'System - import'
        );

        SELECT last_insert_id() INTO @city_id;
    END IF;

    /* Check if Street exists in DB, if not create */
    SET @street_id = (SELECT id FROM street WHERE Name = inStreetName);
    IF (@street_id IS NULL) THEN
        INSERT INTO street (Name, City_ID, CreatedOn, CreatedBy, LastUpdate, UpdateBy)
        VALUE (
               inStreetName,
               @city_id,
               NOW(),
               'System - import',
               NOW(),
               'System - import'
        );
        SELECT last_insert_id() INTO @street_id;
    END IF;

    /* Check if servicearea exists in DB, if not create */
    SET @servicearea_id = (SELECT id FROM servicearea WHERE Zipcode = inZipcode);
    IF (@servicearea_id IS NULL) THEN
        INSERT INTO servicearea (Zipcode, BreakpointStart, BreakpointEnd, Street_ID, CreatedOn, CreatedBy, LastUpdate, UpdateBy)
        VALUE (
            inZipcode,
            inBreakpointStart,
            inBreakpointEnd,
            @street_id,
            NOW(),
            'System - import',
            NOW(),
            'System - import'
        );
    END IF;

    SET FOREIGN_KEY_CHECKS = 1;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_Strip_non_Digit
-- -----------------------------------------------------

USE `marios_pizza`;
DROP function IF EXISTS `marios_pizza`.`func_Strip_non_Digit`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `func_Strip_non_Digit`(input VARCHAR(255)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
   DECLARE output   VARCHAR(255) DEFAULT '';
   DECLARE iterator INT          DEFAULT 1;
   WHILE iterator < (LENGTH(input) + 1) DO
      IF SUBSTRING(input, iterator, 1) IN (',', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ) THEN
         SET output = CONCAT(output, SUBSTRING(input, iterator, 1));
      END IF;
      SET iterator = iterator + 1;
   END WHILE;   
   RETURN output;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_Strip_non_Digit_return_decimal
-- -----------------------------------------------------

USE `marios_pizza`;
DROP function IF EXISTS `marios_pizza`.`func_Strip_non_Digit_return_decimal`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `func_Strip_non_Digit_return_decimal`(input VARCHAR(255)) RETURNS decimal(10,0)
BEGIN
# need SET GLOBAL log_bin_trust_function_creators = 1;
   DECLARE output  Decimal(7,3) DEFAULT 0;
   DECLARE temp VARCHAR(255);
   DECLARE iterator INT          DEFAULT 1;
   WHILE iterator < (LENGTH(input) + 1) DO
      IF SUBSTRING(input, iterator, 1) IN (',', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ) THEN
         SET temp = CONCAT(output, SUBSTRING(input, iterator, 1));
      END IF;
      SET iterator = iterator + 1;
   END WHILE;   

	SET output = CONVERT(temp, DECIMAL(7,3));
#   RETURN output;
	RETURN output;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_dateTime_to_TimeStamp
-- -----------------------------------------------------

USE `marios_pizza`;
DROP function IF EXISTS `marios_pizza`.`func_dateTime_to_TimeStamp`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `func_dateTime_to_TimeStamp`(
		strDate VARCHAR(30)
        , strTime VARCHAR(30)
) RETURNS datetime
BEGIN
	# Required: SET GLOBAL log_bin_trust_function_creators = 1;
    # Function usage: func_dateTime_to_TimeStamp('maandag 29 juni 2019','11:16')
	DECLARE resultDateTime VARCHAR(255);
    DECLARE strTempDay VARCHAR(10);
    DECLARE strTempVarMonth VARCHAR(15);
    DECLARE strTempYear VARCHAR(4);
    DECLARE strTempTime VARCHAR(8);
    DECLARE tempString VARCHAR(20);
    
    # Input strDate: 			woensdag 5 juni 2019
    # Input strTime: 			20:05
    # Result resultDateTime:	2021-10-10 18:29:54
    
    # Chop off 'day'
    SET tempString = (SELECT SUBSTRING_INDEX(strDate, ' ',-3) );
    
    # Filter daynumber
    SET strTempDay = SUBSTRING_INDEX(SUBSTRING_INDEX(tempString, ' ', 1), ' ', -1);
    
    # Filter monthname
    SET strTempVarMonth = SUBSTRING_INDEX(SUBSTRING_INDEX(tempString, ' ', 2), ' ', -1);
    IF STRCMP(strTempVarMonth, 'Januari') = 0 THEN 
		SET strTempVarMonth = '01';
    ELSEIF STRCMP(strTempVarMonth, 'Februari') = 0 THEN 
		SET strTempVarMonth = '02';
	ELSEIF STRCMP(strTempVarMonth, 'Maart') = 0 THEN 
		SET strTempVarMonth = '03';
	ELSEIF STRCMP(strTempVarMonth, 'April') = 0 THEN 
		SET strTempVarMonth = '04';
	ELSEIF STRCMP(strTempVarMonth, 'Mei') = 0 THEN 
		SET strTempVarMonth = '05';
	ELSEIF STRCMP(strTempVarMonth, 'Juni') = 0 THEN 
		SET strTempVarMonth = '06';
	ELSEIF STRCMP(strTempVarMonth, 'Juli') = 0 THEN 
		SET strTempVarMonth = '07';
	ELSEIF STRCMP(strTempVarMonth, 'Augustus') = 0 THEN 
		SET strTempVarMonth = '08';
	ELSEIF STRCMP(strTempVarMonth, 'September') = 0 THEN 
		SET strTempVarMonth = '09';
	ELSEIF STRCMP(strTempVarMonth, 'Oktober') = 0 THEN 
		SET strTempVarMonth = '10';
	ELSEIF STRCMP(strTempVarMonth, 'November') = 0 THEN 
		SET strTempVarMonth = '11';
	ELSEIF STRCMP(strTempVarMonth, 'December') = 0 THEN 
		SET strTempVarMonth = '12';
	ELSE
		SET strTempVarMonth = strTempVarMonth;
	END IF;
        
    # Filter Year
	SET strTempYear = SUBSTRING_INDEX(tempString, ' ',-1);
    
    # Filter time
    IF (strTime REGEXP '^[[:digit:]]+\\:{0,1}[[:digit:]]*$') = 0 THEN
		SET strTime = '00:00';
    ELSE 
		SET strTime = strTime;
	END IF;
    
    # Putting results together
    SET resultDateTime = (SELECT CONCAT(strTempYear, '-',strTempVarMonth, '-', strTempDay, ' ', strTime, ':00'));
    
    RETURN STR_TO_DATE(resultDateTime, '%Y-%m-%d %H:%i:%s');
    #RETURN LOWER(resultDateTime);
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_temp_dateTime_to_TimeStamp
-- -----------------------------------------------------

USE `marios_pizza`;
DROP function IF EXISTS `marios_pizza`.`func_temp_dateTime_to_TimeStamp`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `func_temp_dateTime_to_TimeStamp`(
		strDate VARCHAR(30)
        , strTime VARCHAR(30)
) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
	# Required: SET GLOBAL log_bin_trust_function_creators = 1;
    # Function usage: func_dateTime_to_TimeStamp('maandag 29 juni 2019','11:16')
	DECLARE resultDateTime VARCHAR(255);
    DECLARE strTempDay VARCHAR(10);
    DECLARE strTempVarMonth VARCHAR(15);
    DECLARE strTempYear VARCHAR(4);
    DECLARE strTempTime VARCHAR(8);
    DECLARE tempString VARCHAR(20);
    
    # Input strDate: 			woensdag 5 juni 2019
    # Input strTime: 			20:05
    # Result resultDateTime:	2021-10-10 18:29:54
    
    # Chop off 'day'
    SET tempString = (SELECT SUBSTRING_INDEX(strDate, ' ',-3) );
    
    # Filter daynumber
    SET strTempDay = SUBSTRING_INDEX(SUBSTRING_INDEX(tempString, ' ', 1), ' ', -1);
    
    # Filter monthname
    SET strTempVarMonth = SUBSTRING_INDEX(SUBSTRING_INDEX(tempString, ' ', 2), ' ', -1);
    IF STRCMP(strTempVarMonth, 'Januari') = 0 THEN 
		SET strTempVarMonth = '01';
    ELSEIF STRCMP(strTempVarMonth, 'Februari') = 0 THEN 
		SET strTempVarMonth = '02';
	ELSEIF STRCMP(strTempVarMonth, 'Maart') = 0 THEN 
		SET strTempVarMonth = '03';
	ELSEIF STRCMP(strTempVarMonth, 'April') = 0 THEN 
		SET strTempVarMonth = '04';
	ELSEIF STRCMP(strTempVarMonth, 'Mei') = 0 THEN 
		SET strTempVarMonth = '05';
	ELSEIF STRCMP(strTempVarMonth, 'Juni') = 0 THEN 
		SET strTempVarMonth = '06';
	ELSEIF STRCMP(strTempVarMonth, 'Juli') = 0 THEN 
		SET strTempVarMonth = '07';
	ELSEIF STRCMP(strTempVarMonth, 'Augustus') = 0 THEN 
		SET strTempVarMonth = '08';
	ELSEIF STRCMP(strTempVarMonth, 'September') = 0 THEN 
		SET strTempVarMonth = '09';
	ELSEIF STRCMP(strTempVarMonth, 'Oktober') = 0 THEN 
		SET strTempVarMonth = '10';
	ELSEIF STRCMP(strTempVarMonth, 'November') = 0 THEN 
		SET strTempVarMonth = '11';
	ELSEIF STRCMP(strTempVarMonth, 'December') = 0 THEN 
		SET strTempVarMonth = '12';
	ELSE
		SET strTempVarMonth = strTempVarMonth;
	END IF;
        
    # Filter Year
	SET strTempYear = SUBSTRING_INDEX(tempString, ' ',-1);
    
    # Putting results together
    SET resultDateTime = (SELECT CONCAT(strTempYear, '-',strTempVarMonth, '-', strTempDay, ' ', strTime, ':00'));
    
    #RETURN STR_TO_DATE(resultDateTime, '%Y-%m-%d %H:%i:%s');
    RETURN LOWER(resultDateTime);
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_procedure
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`new_procedure`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `new_procedure`()
BEGIN
	UPDATE marios_pizza.marioorderdata01 ord
	JOIN marios_pizza.customer cust USING (Email)
	SET ord.CustomerID = cust.ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_Insert_New_Customers
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_Insert_New_Customers`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_Insert_New_Customers`()
BEGIN
	INSERT IGNORE
	INTO Marios_pizza.customer(Name, Birthdate, Email, Phone1, Phone2, CreatedOn, CreatedBy, LastUpdate, UpdateBy, Deleted)
	SELECT Klantnaam AS Name
		,NULL AS Birthdate
		,Email
		,TelefoonNr AS Phone1
		,NULL AS Phone2
		,CURRENT_TIMESTAMP AS CreatedOn
		,'System - import' AS CreatedBy
		,CURRENT_TIMESTAMP AS LastUpdate
		,'System - import' AS UpdateBy
		,0 AS Deleted
	FROM marios_pizza.marioorderdata01 AS srcTable
    GROUP BY Email
    ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_Update_Order_Customer_ID
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_Update_Order_Customer_ID`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_Update_Order_Customer_ID`()
BEGIN
	UPDATE marios_pizza.marioorderdata01 ord
	JOIN marios_pizza.customer cust USING (Email)
	SET ord.CustomerID = cust.ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_derive_Coupons_From_OrderData_And_Insert
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_derive_Coupons_From_OrderData_And_Insert`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_derive_Coupons_From_OrderData_And_Insert`()
BEGIN
	INSERT IGNORE
INTO marios_pizza.coupon(Code, DiscountPercentage, Discountprice, CouponFormula, Description, Active, StartDate, EndDate, CreatedOn, CreatedBy, LastUpdate, UpdateBy, Deleted)
SELECT uuid_v4() AS Code
	,NULL AS DiscountPercentage
	,NULL AS DiscountPrice
	,NULL AS CouponFormula
	,srcTable.*
FROM (
	SELECT `Gebruikte Coupon` AS Description
		,1 AS Active
		,'2021-10-01 00:00:01' AS StartDate
		,NULL AS EndDate
		,CURRENT_TIMESTAMP AS CreatedOn
		,'System - import' AS CreatedBy
		,CURRENT_TIMESTAMP AS LastUpdate
		,'System - import' AS UpdateBy
		,0 AS Deleted
	FROM marios_pizza.marioorderdata01
	WHERE `Gebruikte Coupon` > ''
	GROUP BY `Gebruikte Coupon`
	) AS srcTable
    ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_derive_DeliverType_from_OrderData
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_derive_DeliverType_from_OrderData`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_derive_DeliverType_from_OrderData`()
BEGIN
	INSERT INTO marios_pizza.deliverytype (Type, Active, CreatedOn, CreatedBy, LastUpdate, UpdateBy, Deleted)
	SELECT AfleverType	AS Type
					, 1 as Active
					, CURRENT_TIMESTAMP as CreatedOn
					, 'System - import' as CreatedBy
					, CURRENT_TIMESTAMP as LastUpdate
					, 'System - import' as UpdateBy
					, 0 as Deleted
                    FROM marios_pizza.marioorderdata01
                    GROUP BY AfleverType
    ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_derive_OrderItems_From_OrderData
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_derive_OrderItems_From_OrderData`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_derive_OrderItems_From_OrderData`()
BEGIN
INSERT INTO marios_pizza.orderitem (OrderID, Pizza_ID, NonPizza_ID, OrderName, Amount, TotalPrice, Tax, CreatedOn, CreatedBy, LastUpdate, UpdateBy, Deleted)
	SELECT srcTable.OrderID as OrderID
		, srcTable.ProductID as Pizza_ID
        , srcTable.ProductID as NonPizza_ID
        , srcTable.Product AS OrderName
        , srcTable.Aantal as Amount
        , srcTable.regelprijs as TotalPrice
        , 0 as Tax
		, CURRENT_TIMESTAMP AS CreatedOn
		, 'System - import' AS CreatedBy
		, CURRENT_TIMESTAMP AS LastUpdate
		, 'System - import' AS UpdateBy
		, 0 as Deleted
	FROM marios_pizza.marioorderdata01 AS srcTable
	;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_derive_Orders_From_MarioData
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_derive_Orders_From_MarioData`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_derive_Orders_From_MarioData`()
BEGIN
	INSERT INTO marios_pizza.order (OrderStatus, DeliveryPlan, DeliveryTime, DeliveryPrice, Customer_Id, DeliveryType_ID, Shop_ID, OrderDate, TotalOrderPrice, CreatedOn, CreatedBy, LastUpdate, UpdateBy, Deleted)
   SELECT  		CASE	
						WHEN srcTable.AfleverMoment > '' THEN 0
                        WHEN srcTable.AfleverMoment IS NULL OR srcTable.AfleverMoment = ''  THEN 1
					END AS OrderStatus
					, func_dateTime_to_TimeStamp(AfleverDatum,Aflevermoment) AS DeliveryPlan
					, func_dateTime_to_TimeStamp(AfleverDatum,Aflevermoment) AS DeliveryTime
                    , CONVERT(Bezorgkosten, FLOAT) AS DeliveryPrice
                    , CustomerID AS Customer_Id
                    , DeliveryTypeID AS DeliveryType_ID
                    , WinkelID AS Shop_ID
                    , func_dateTime_to_TimeStamp(Besteldatum,'00:00') AS OrderDate
                    , TotaalprijsDecimal AS TotalOrderPrice
					, CURRENT_TIMESTAMP AS CreatedOn
					, 'System - import' AS CreatedBy
					, CURRENT_TIMESTAMP AS LastUpdate
					, 'System - import' AS UpdateBy
					, 0 as Deleted
					FROM marios_pizza.marioorderdata01 srcTable
					GROUP BY Email, AfleverDatum, Aflevermoment
     ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_insertCustomerAddress
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_insertCustomerAddress`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_insertCustomerAddress`()
BEGIN
INSERT IGNORE INTO Marios_pizza.addressinfo(HouseNumber, Address, Zipcode, City, CreatedOn, CreatedBy, LastUpdate, UpdateBy, Deleted)
SELECT regexp_substr(Adres, '[0-9]+$') AS HouseNumber
	,LEFT(Adres, LENGTH(Adres) - LOCATE(' ', REVERSE(Adres)) + 1) AS Address
	,NULL AS Zipcode
	,Woonplaats AS City
	,CURRENT_TIMESTAMP AS CreatedOn
	,'System - import' AS CreatedBy
	,CURRENT_TIMESTAMP AS LastUpdate
	,'System - import' AS UpdateBy
	,0 AS Deleted
FROM marios_pizza.marioorderdata01 AS srcTable
GROUP BY Woonplaats
	,Adres;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_insert_customer_address_info_from_marioorderdata
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_insert_customer_address_info_from_marioorderdata`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_insert_customer_address_info_from_marioorderdata`()
BEGIN
	INSERT IGNORE
INTO marios_pizza.customer_addressinfo (Customer_ID, AddressInfo_ID, CreatedOn, CreatedBy, LastUpdate, UpdateBy, Deleted)
SELECT destTable.CustomerID AS Customer_ID
	,srcTable.ID AS AddressInfo_ID
	,CURRENT_TIMESTAMP AS CreatedOn
	,'System - import' AS CreatedBy
	,CURRENT_TIMESTAMP AS LastUpdate
	,'System - import' AS UpdateBy
	,0 AS Deleted
FROM marios_pizza.marioorderdata01 AS destTable
JOIN marios_pizza.addressinfo AS srcTable ON LEFT(destTable.Adres, LENGTH(destTable.Adres) - LOCATE(' ', REVERSE(destTable.Adres)) + 1) = srcTable.Address
	AND destTable.Woonplaats = srcTable.City
	AND regexp_substr(destTable.Adres, '[0-9]+$') = srcTable.HouseNumber
GROUP BY Email;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_truncate_all_tables
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_truncate_all_tables`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_truncate_all_tables`()
BEGIN
	SET FOREIGN_KEY_CHECKS=0;
	TRUNCATE marios_pizza.`addressinfo`;
	TRUNCATE marios_pizza.`category`;
	TRUNCATE marios_pizza.`city`;
	TRUNCATE marios_pizza.`coupon`;
	TRUNCATE marios_pizza.`customer`;
	TRUNCATE marios_pizza.`customer_addressinfo`;
	TRUNCATE marios_pizza.`deliverytype`;
	TRUNCATE marios_pizza.`differentopeningtime`;
	TRUNCATE marios_pizza.`ingredient`;
	TRUNCATE marios_pizza.`item_property`;
	TRUNCATE marios_pizza.`marioorderdata01`;
	TRUNCATE marios_pizza.`municipality`;
	TRUNCATE marios_pizza.`nonpizza`;
	TRUNCATE marios_pizza.`openingtime`;
	TRUNCATE marios_pizza.`order`;
	TRUNCATE marios_pizza.`order_coupon`;
	TRUNCATE marios_pizza.`orderitem`;
	TRUNCATE marios_pizza.`pizza`;
	TRUNCATE marios_pizza.`pizza_ingredient`;
	TRUNCATE marios_pizza.`pizzabottom`;
	TRUNCATE marios_pizza.`pizzabottomtype`;
	TRUNCATE marios_pizza.`property`;
	TRUNCATE marios_pizza.`sauce`;
	TRUNCATE marios_pizza.`servicearea`;
	TRUNCATE marios_pizza.`shop`;
	TRUNCATE marios_pizza.`street`;
	TRUNCATE marios_pizza.`subcategory`;
	TRUNCATE marios_pizza.`tax`;
	SET FOREIGN_KEY_CHECKS=1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_truncate_partial_tables
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_truncate_partial_tables`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_truncate_partial_tables`()
BEGIN
	SET FOREIGN_KEY_CHECKS=0;
	TRUNCATE marios_pizza.`addressinfo`;
	TRUNCATE marios_pizza.`category`;
	TRUNCATE marios_pizza.`coupon`;
	TRUNCATE marios_pizza.`customer`;
	TRUNCATE marios_pizza.`customer_addressinfo`;
	TRUNCATE marios_pizza.`deliverytype`;
	TRUNCATE marios_pizza.`differentopeningtime`;
	TRUNCATE marios_pizza.`ingredient`;
	TRUNCATE marios_pizza.`item_property`;
	TRUNCATE marios_pizza.`marioorderdata01`;
	TRUNCATE marios_pizza.`nonpizza`;
	TRUNCATE marios_pizza.`openingtime`;
	TRUNCATE marios_pizza.`order`;
	TRUNCATE marios_pizza.`order_coupon`;
	TRUNCATE marios_pizza.`orderitem`;
	TRUNCATE marios_pizza.`pizza`;
	TRUNCATE marios_pizza.`pizza_ingredient`;
	TRUNCATE marios_pizza.`pizzabottom`;
	TRUNCATE marios_pizza.`pizzabottomtype`;
	TRUNCATE marios_pizza.`property`;
	TRUNCATE marios_pizza.`sauce`;
	TRUNCATE marios_pizza.`subcategory`;
	TRUNCATE marios_pizza.`tax`;
	SET FOREIGN_KEY_CHECKS=1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_updateWinkelnaam
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_updateWinkelnaam`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_updateWinkelnaam`()
BEGIN
  DECLARE CURSOR_Id INT;
  DECLARE CURSOR_Winkelnaam VARCHAR(255);
  DECLARE done INT DEFAULT FALSE;
  DECLARE cursor_Order CURSOR FOR SELECT ID, Name FROM marios_pizza.city;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  OPEN cursor_Order;
  loop_through_rows: LOOP
    FETCH cursor_Order INTO CURSOR_Id, CURSOR_Winkelnaam;
    IF done THEN
      LEAVE loop_through_rows;
    END IF;
    UPDATE new_schema.marioorderdata01 SET Winkelnaam = CURSOR_Id WHERE Name = CURSOR_Winkelnaam;
  END LOOP;
  CLOSE cursor_Order;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_update_CouponID_on_MarioOrderData
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_update_CouponID_on_MarioOrderData`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_update_CouponID_on_MarioOrderData`()
BEGIN
	UPDATE marios_pizza.marioorderdata01 AS destTable
	SET `CouponID` =  ( SELECT ID
							FROM marios_pizza.coupon srcTable
							WHERE srcTable.Description = destTable.`Gebruikte Coupon` AND destTable.`Gebruikte Coupon` > ''
						)
    ;    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_update_CustomerAddressID_on_marioorderdata01
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_update_CustomerAddressID_on_marioorderdata01`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_update_CustomerAddressID_on_marioorderdata01`()
BEGIN
UPDATE marios_pizza.marioorderdata01 ordData
JOIN marios_pizza.customer AS cust ON ordData.CustomerID = cust.ID
JOIN marios_pizza.customer_addressinfo AS custAddressInfo ON cust.ID = custAddressInfo.Customer_ID
JOIN marios_pizza.addressinfo AS addressInfo ON custAddressInfo.AddressInfo_ID = addressInfo.ID
SET ordData.AddressID = addressinfo.ID
    ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_update_DeliverTypeID_on_OrderData
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_update_DeliverTypeID_on_OrderData`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_update_DeliverTypeID_on_OrderData`()
BEGIN
UPDATE marios_pizza.marioorderdata01 AS destTable    
JOIN marios_pizza.deliverytype srcTable ON destTable.AfleverType = srcTable.Type
SET destTable.DeliveryTypeID = srcTable.ID
;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_update_OrderID_on_MarioOrderData
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_update_OrderID_on_MarioOrderData`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_update_OrderID_on_MarioOrderData`()
BEGIN
	UPDATE marios_pizza.marioorderdata01 destTable    
		JOIN marios_pizza.order srcTable ON destTable.CustomerID = srcTable.Customer_Id 
		SET destTable.OrderID = srcTable.ID
        # 'woensdag 5 juni 2019' - '2019-06-05 00:00:00'
		WHERE func_dateTime_to_TimeStamp(destTable.Besteldatum,'00:00') = srcTable.OrderDate
        AND
		# 'woensdag 5 juni 2019' (aflevermoment) '20:05'- '2019-06-05 20:05:00'
		func_dateTime_to_TimeStamp(destTable.AfleverDatum,destTable.Aflevermoment) = srcTable.DeliveryTime
		AND
		destTable.WinkelID = srcTable.Shop_ID
		
;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_update_WinkelID
-- -----------------------------------------------------

USE `marios_pizza`;
DROP procedure IF EXISTS `marios_pizza`.`proc_update_WinkelID`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_update_WinkelID`()
BEGIN
	UPDATE marios_pizza.marioorderdata01 tempDB
	SET WinkelID =  ( SELECT ID
							FROM marios_pizza.shop destDB
							WHERE destDB.Name = tempDB.Winkelnaam
						)
	WHERE Winkelnaam IN ( SELECT Name 
							FROM marios_pizza.shop destDB)
    ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function uuid_v4
-- -----------------------------------------------------

USE `marios_pizza`;
DROP function IF EXISTS `marios_pizza`.`uuid_v4`;

DELIMITER $$
USE `marios_pizza`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `uuid_v4`() RETURNS char(36) CHARSET utf8mb3
    NO SQL
BEGIN
    -- Generate 8 2-byte strings that we will combine into a UUIDv4
    SET @h1 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h2 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h3 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h6 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h7 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');
    SET @h8 = LPAD(HEX(FLOOR(RAND() * 0xffff)), 4, '0');

    -- 4th section will start with a 4 indicating the version
    SET @h4 = CONCAT('4', LPAD(HEX(FLOOR(RAND() * 0x0fff)), 3, '0'));

    -- 5th section first half-byte can only be 8, 9 A or B
    SET @h5 = CONCAT(HEX(FLOOR(RAND() * 4 + 8)),
                LPAD(HEX(FLOOR(RAND() * 0x0fff)), 3, '0'));

    -- Build the complete UUID
    RETURN LOWER(CONCAT(
        @h1, @h2, '-', @h3, '-', @h4, '-', @h5, '-', @h6, @h7, @h8
    ));
END$$

DELIMITER ;
USE `marios_pizza`;

DELIMITER $$

USE `marios_pizza`$$
DROP TRIGGER IF EXISTS `marios_pizza`.`Pizza_Ingredient_BEFORE_INSERT` $$
USE `marios_pizza`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `marios_pizza`.`Pizza_Ingredient_BEFORE_INSERT`
BEFORE INSERT ON `marios_pizza`.`pizza_ingredient`
FOR EACH ROW
BEGIN

END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
